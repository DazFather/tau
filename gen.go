//go:build ignore

package main

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"text/template"
	"time"
)

type data struct {
	Timestamp  string
	TauVersion string
	GoVersion  string
}

func main() {
	tauversion, err := exec.Command("git", "describe", "--tags", "--abbrev=0").Output()
	check(err)

	goversion, err := exec.Command("go", "version").Output()
	check(err)

	f, err := os.Create("versions.go")
	check(err)
	defer f.Close()

	temp.Execute(f, data{
		Timestamp:  time.Now().Format(time.RFC1123),
		TauVersion: string(bytes.Trim(tauversion, " \n")),
		GoVersion:  string(bytes.Trim(goversion, " \n")),
	})
}

func check(err error) {
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

var temp = template.Must(template.New("").Parse(`// Code generated by "go run gen.go" at {{ .Timestamp }}; DO NOT EDIT.
package tau

const (
	TauVersion = "{{ .TauVersion }}"
	GoVersion  = "{{ .GoVersion }}"
)
`))
